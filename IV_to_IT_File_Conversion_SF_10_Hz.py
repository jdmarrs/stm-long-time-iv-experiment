#===============================================================================
# IV_to_IT_File_Conversion_SF_10_Hz.py
# Python script for converting IV text files generated by "Tapping_IV_browser - log - 4Gfit copy - Modified for Saving IV Files.vi" LabVIEW Program.
# Open IV text file with two columns (voltage, current) and convert voltage to time (V --> Seconds) using voltage sweep frequency (Hz) and range (V).
# In other words, converts 4 quadrants of voltage sweep cycle [0 --> +, + --> 0, 0 --> -, - --> 0] into one continuous linear time progression.
# Also removes bias (0.3 V in the default case) before converting voltage to time.
# Author: Jon Marrs
# Date: 2017-07-28
#===============================================================================

# Note: Ideally, this Python script should be called by the associated Python script "Convert_All_IV_Files_SF_*_Hz.py" to automatically iterate through all files in the "IV Curves" folder

# Import variables from calling script
from __main__ import *

import os
import sys

#===============================================================================
# BEGIN Configuration
#===============================================================================

# Debug Mode (1 = True, 0 = False) [Debug Mode used to print debug info to console]
Debug_Mode = 0
    
# Bias (V)
bias_V = 0.3
    
# Sweep Frequency (Hz)
sweep_freq_Hz = 10.0
    
# Sweep Amplitude (V) [one quadrant of voltage sweep cycle]
sweep_amplitude_V = 0.0001

# Sweep Range (V) [should be 4 x Sweep Amplitude]
sweep_range_V = 0.0004    # 400 uV per cycle... 100 uV (0.0001 V) for each of the four quadrants of the sweep cycle (0 V -> 100 uV, 100 uV -> 0 V, 0 V -> -100 uV, -100 uV -> 0 V)

# Voltage Increment (V) [e.g., 0.000000004 for 0.1 Hz Sweep Frequency, 0.000000040 for 1.0 Hz Sweep Frequency, 0.000000400 for 10.0 Hz Sweep Frequency]
voltage_increment_V = 0.000000400

# Number of Data Lines (Rows) in File [e.g., 100000 for 0.1 Hz Sweep Frequency, 10000 for 1.0 Hz Sweep Frequency, 1000 for 10.0 Hz Sweep Frequency]
lines_in_file = 1000

# IT File Directory Name (Name of the directory where the IT files are relative to the script(s) location)
it_file_directory_name = "IT Curves"

#===============================================================================
# END Configuration
#===============================================================================

lines_per_quadrant = lines_in_file / 4
V_to_S = ( 1 / (sweep_freq_Hz * sweep_range_V) )  # multiply the voltage by this conversion factor to convert to seconds
rounded_V_to_S = round(V_to_S)

current_directory = os.getcwd()
parent_directory = os.path.dirname(os.getcwd())
#print(current_directory)
#print(parent_directory)

# Check for "IT Curves" directory, and if it doesn't exist, create it
if not os.path.exists(parent_directory + "\\" + it_file_directory_name):
        os.mkdir(parent_directory + "\\" + it_file_directory_name)


# Open the file_name that was passed as the first system argument when calling this script, and save a new text file as the new_file_name that was passed as the second system argument.
with open(parent_directory + "\\" + it_file_directory_name + "/" + sys.argv[2], 'w') as outfile, open(sys.argv[1], 'r') as infile:
    
    i = 0
    j = 0
    k = 0
    l = 0
    m = 0
    n = 0
    
    for line in infile:
        # First Quadrant
        if i <= (lines_per_quadrant * 1):
            line = line.split()
            voltage = float(line[0])
            current = float(line[1])
            voltage_without_bias = voltage - bias_V
            rounded_voltage_without_bias = round(voltage_without_bias, 10)
            adjusted_voltage = rounded_voltage_without_bias
            rounded_adjusted_voltage = round(adjusted_voltage, 10)
            time = adjusted_voltage * rounded_V_to_S
            rounded_time = round(time, 10)
            
            new_line = '{0} {1}'.format(rounded_time, current)
            
            outfile.write(new_line + "\n")
            
            if Debug_Mode:
                print(new_line)
                print("First Quadrant")
                print("i:", i)
                debug_line = '{0} V | {1} V | {2} V | {3} V | {4} V | {5} seconds | {6} seconds | {7} A | {8} A'.format(line[0], voltage, voltage_without_bias, rounded_voltage_without_bias, rounded_adjusted_voltage, time, rounded_time, line[1], current)
                print(debug_line)
                print()
            
        # Second Quadrant
        elif i <= (lines_per_quadrant * 2):
            line = line.split()
            voltage = float(line[0])
            current = float(line[1])
            voltage_without_bias = voltage - bias_V
            rounded_voltage_without_bias = round(voltage_without_bias, 10)
            adjusted_voltage = rounded_voltage_without_bias + (k * voltage_increment_V)
            rounded_adjusted_voltage = round(adjusted_voltage, 10)
            time = adjusted_voltage * rounded_V_to_S
            rounded_time = round(time, 10)
            j = j+1
            k = k+2
            
            new_line = '{0} {1}'.format(rounded_time, current)
            
            outfile.write(new_line + "\n")
            
            if Debug_Mode:
                print(new_line)
                print("Second Quadrant")
                print("i:", i)
                print("j:", j)
                print("k:", k)
                debug_line = '{0} V | {1} V | {2} V | {3} V | {4} V | {5} seconds | {6} seconds | {7} A | {8} A'.format(line[0], voltage, voltage_without_bias, rounded_voltage_without_bias, rounded_adjusted_voltage, time, rounded_time, line[1], current)
                print(debug_line)
                print()
            
        # Third Quadrant
        elif i <= (lines_per_quadrant * 3):
            line = line.split()
            voltage = float(line[0])
            current = float(line[1])
            voltage_without_bias = voltage - bias_V
            rounded_voltage_without_bias = round(voltage_without_bias, 10)
            adjusted_voltage = rounded_voltage_without_bias + ((k + m) * voltage_increment_V)
            rounded_adjusted_voltage = round(adjusted_voltage, 10)
            time = adjusted_voltage * rounded_V_to_S
            rounded_time = round(time, 10)
            l = l+1
            m = m+2

            new_line = '{0} {1}'.format(rounded_time, current)
            
            outfile.write(new_line + "\n")
            
            if Debug_Mode:
                print(new_line)
                print("Third Quadrant")
                print("i:", i)
                print("j:", j)
                print("k:", k)
                print("l:", l)
                print("m:", m)
                debug_line = '{0} V | {1} V | {2} V | {3} V | {4} V | {5} seconds | {6} seconds | {7} A | {8} A'.format(line[0], voltage, voltage_without_bias, rounded_voltage_without_bias, rounded_adjusted_voltage, time, rounded_time, line[1], current)
                print(debug_line)
                print()

        # Fourth Quadrant
        elif i <= (lines_per_quadrant * 4):
            line = line.split()
            voltage = float(line[0])
            current = float(line[1])
            voltage_without_bias = voltage - bias_V
            rounded_voltage_without_bias = round(voltage_without_bias, 10)
            adjusted_voltage = rounded_voltage_without_bias + ((k + m) * voltage_increment_V)
            rounded_adjusted_voltage = round(adjusted_voltage, 10)
            time = adjusted_voltage * rounded_V_to_S
            rounded_time = round(time, 10)
            n = n+1

            new_line = '{0} {1}'.format(rounded_time, current)
            
            outfile.write(new_line + "\n")
            
            if Debug_Mode:
                print(new_line)
                print("Fourth Quadrant")
                print("i:", i)
                print("j:", j)
                print("k:", k)
                print("l:", l)
                print("m:", m)
                print("n:", n)
                debug_line = '{0} V | {1} V | {2} V | {3} V | {4} V | {5} seconds | {6} seconds | {7} A | {8} A'.format(line[0], voltage, voltage_without_bias, rounded_voltage_without_bias, rounded_adjusted_voltage, time, rounded_time, line[1], current)
                print(debug_line)
                print()

        # Error Handling for > "lines_in_file" (e.g., 100,000) indexes
        else:
            if Debug_Mode:
                print("ERROR")
                print("i:", i)
                print("j:", j)
                print("k:", k)
                print("l:", l)
                print("m:", m)
                print("n:", n)
                print()
    
#        line = line.split()
#        voltage = float(line[0])
#        current = float(line[1])
#        voltage_without_bias = voltage - bias_V
#        rounded_voltage_without_bias = round(voltage_without_bias, 10)
#        time = voltage_without_bias * rounded_V_to_S
#        rounded_time = round(time, 10)

        #new_line = '{0} V | {1} V | {2} V | {3} V | {4} V | {5} seconds | {6} seconds | {7} A | {8} A'.format(line[0], voltage, voltage_without_bias, rounded_voltage_without_bias, adjusted_voltage, time, rounded_time, line[1], current)
        #print(new_line)
        
        i = i+1
        
        
    if Debug_Mode:
        print("Sweep Frequency: " + str(sweep_freq_Hz) + " Hz")
        print("Sweep Amplitude: " + str(sweep_amplitude_V) + " V")
        print("Sweep Range: " + str(sweep_range_V) + " V")
        print("Voltage to Seconds Conversion Factor: " + str(rounded_V_to_S) + " seconds/V")

infile.close()    
outfile.close()

print(os.path.abspath('../' + it_file_directory_name))

print(sys.argv[2])

